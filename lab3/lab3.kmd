KMD
00000000: EA000086    ;         B part3 ; part1 or part2 or part3
00000004:             ; 
00000004: 00 00 00 00 ; buffer  DEFS 100,0
00000008: 00 00 00 00 ; 
0000000C: 00 00 00 00 ; 
00000010: 00 00 00 00 ; 
00000014: 00 00 00 00 ; 
00000018: 00 00 00 00 ; 
0000001C: 00 00 00 00 ; 
00000020: 00 00 00 00 ; 
00000024: 00 00 00 00 ; 
00000028: 00 00 00 00 ; 
0000002C: 00 00 00 00 ; 
00000030: 00 00 00 00 ; 
00000034: 00 00 00 00 ; 
00000038: 00 00 00 00 ; 
0000003C: 00 00 00 00 ; 
00000040: 00 00 00 00 ; 
00000044: 00 00 00 00 ; 
00000048: 00 00 00 00 ; 
0000004C: 00 00 00 00 ; 
00000050: 00 00 00 00 ; 
00000054: 00 00 00 00 ; 
00000058: 00 00 00 00 ; 
0000005C: 00 00 00 00 ; 
00000060: 00 00 00 00 ; 
00000064: 00 00 00 00 ; 
00000068:             ; 
00000068: 6F 6E 65 00 ; s1      DEFB "one\0"
0000006C:             ;         ALIGN
0000006C: 74 77 6F 00 ; s2      DEFB "two\0"
00000070:             ;         ALIGN
00000070: 74 68 72 65 ; s3      DEFB "three\0"
00000074: 65 00       ; 
00000078:             ;         ALIGN
00000078: 66 6F 75 72 ; s4      DEFB "four\0"
0000007C: 00          ; 
00000080:             ;         ALIGN
00000080: 66 69 76 65 ; s5      DEFB "five\0"
00000084: 00          ; 
00000088:             ;         ALIGN
00000088: 73 69 78 00 ; s6      DEFB "six\0"
0000008C:             ;         ALIGN
0000008C: 73 65 76 65 ; s7      DEFB "seven\0"
00000090: 6E 00       ; 
00000094:             ;         ALIGN
00000094: 74 77 65 6E ; s8      DEFB "twentytwo\0"
00000098: 74 79 74 77 ; 
0000009C: 6F 00       ; 
000000A0:             ;         ALIGN
000000A0: 74 77 65 6E ; s9      DEFB "twenty\0"
000000A4: 74 79 00    ; 
000000A8:             ;         ALIGN
000000A8:             ; 
000000A8:             ; ;************************** part 1 **************************
000000A8:             ; printstring
000000A8:             ;         ;MOV  R0,R1     ; given
000000A8:             ;         ;SVC  3         ; given
000000A8:             ; 
000000A8: E4D10001    ;    loop LDRB R0, [R1], #1
000000AC: E3500000    ;      CMP R0, #0
000000B0: 1F000000    ;      SVCNE 0
000000B4: 1AFFFFFB    ;      BNE loop
000000B8:             ; 
000000B8:             ; ; your code goes here, replacing the previous 2 lines
000000B8:             ;     
000000B8: E3A0000A    ;     MOV  R0, #10        ; given - output end-of-line
000000BC: EF000000    ;         SVC  0          ; given
000000C0: E1A0F00E    ;         MOV  PC, LR     ; given
000000C4:             ; 
000000C4:             ; ;************************** part 2 ***************************
000000C4:             ; strcat
000000C4: E7D10003    ;     find LDRB R0, [R1, R3]
000000C8: E2833001    ;          ADD R3, R3, #1
000000CC: E3500000    ;          CMP R0, #0
000000D0: 1AFFFFFB    ;          BNE find
000000D4: E2433001    ;         SUB R3, R3, #1
000000D8:             ;  
000000D8: E4D20001    ;     cat LDRB R0, [R2], #1
000000DC: E7C10003    ;         STRB R0, [R1, R3]
000000E0: E2833001    ;         ADD R3, R3, #1
000000E4: E3500000    ;         CMP R0, #0
000000E8: 1AFFFFFA    ;         BNE cat
000000EC: E3A03000    ;         MOV R3, #0
000000F0:             ; 
000000F0:             ; ; your code goes here
000000F0: E1A0F00E    ;         MOV  PC, LR
000000F4:             ; 
000000F4:             ; strcpy 
000000F4: E3A03000    ;          MOV R3, #0
000000F8:             ;     loops 
000000F8: E4D20001    ;          LDRB R0, [R2], #1
000000FC: E7C10003    ;          STRB R0, [R1, R3]
00000100: E2833001    ;          ADD R3, R3, #1
00000104: E3500000    ;          CMP R0, #0
00000108: 1AFFFFFA    ;          BNE loops
0000010C: E3A03000    ;          MOV R3, #0
00000110:             ; 
00000110:             ; ; your code goes here
00000110: E1A0F00E    ;         MOV  PC, LR
00000114:             ; 
00000114:             ; ;************************** part 3 **************************
00000114: E58FE034    ; sorted  STR LR, return2 ; given
00000118: EBFFFFFF    ;         BL search
0000011C:             ; 
0000011C:             ; search
0000011C:             ; 
0000011C: E4D24001    ;   LDRB R4, [R2], #1
00000120: E4D35001    ;   LDRB R5, [R3], #1
00000124:             ; 
00000124: E1540005    ;   CMP R4, R5
00000128: 1A000006    ;   BNE exits
0000012C: 0AFFFFFF    ;   BEQ checkzero
00000130:             ; 
00000130:             ; checkzero
00000130: E3550000    ;   CMP R5, #0
00000134: 0A000003    ;   BEQ exits
00000138: 1AFFFFF7    ;   BNE search
0000013C:             ; 
0000013C: E3540000    ;   CMP R4, #0
00000140: 0A000000    ;   BEQ exits
00000144: 1AFFFFF4    ;   BNE search
00000148:             ; 
00000148: E1540005    ;  exits CMP R4, R5
0000014C:             ; ; your code goes here
0000014C: E51FF004    ;         LDR  PC, return2 ; given
00000150: 00000000    ; return2 DEFW 0          ; given
00000154:             ; 
00000154:             ; ;*********************** the various parts ********************
00000154: E24F10F4    ; part1   ADR R1, s1
00000158: EBFFFFD2    ;         BL  printstring
0000015C: E24F10F8    ;         ADR R1, s2
00000160: EBFFFFD0    ;         BL  printstring
00000164: E24F10FC    ;         ADR R1, s3
00000168: EBFFFFCE    ;         BL  printstring
0000016C: E24F10FC    ;         ADR R1, s4
00000170: EBFFFFCC    ;         BL  printstring
00000174: E24F10FC    ;         ADR R1, s5
00000178: EBFFFFCA    ;         BL  printstring
0000017C: E24F10FC    ;         ADR R1, s6
00000180: EBFFFFC8    ;         BL  printstring
00000184: E24F1C01    ;         ADR R1, s7
00000188: EBFFFFC6    ;         BL  printstring
0000018C: E24F1C01    ;         ADR R1, s8
00000190: EBFFFFC4    ;         BL  printstring
00000194: E24F10FC    ;         ADR R1, s9
00000198: EBFFFFC2    ;         BL  printstring
0000019C: EF000002    ;         SVC 2
000001A0:             ; 
000001A0: E24F2D05    ; part2   ADR R2, s1
000001A4: E24F1F6A    ;         ADR R1, buffer
000001A8: EBFFFFD1    ;         BL  strcpy
000001AC: E24F1E1B    ;         ADR R1, buffer
000001B0: EBFFFFBC    ;         BL  printstring
000001B4: E24F2E15    ;         ADR R2, s2
000001B8: E24F1F6F    ;         ADR R1, buffer
000001BC: EBFFFFC0    ;         BL  strcat
000001C0: E24F1F71    ;         ADR R1, buffer
000001C4: EBFFFFB7    ;         BL  printstring
000001C8: E24F2E16    ;         ADR R2, s3
000001CC: E24F1E1D    ;         ADR R1, buffer
000001D0: EBFFFFBB    ;         BL  strcat
000001D4: E24F1F76    ;         ADR R1, buffer
000001D8: EBFFFFB2    ;         BL  printstring
000001DC: EF000002    ;         SVC 2
000001E0:             ; 
000001E0:             ; ; used by part3
000001E0: 00000000    ; return4 DEFW 0,0
000001E4: 00000000    ; 
000001E8: E50FE010    ; test2   STR LR, return4         ; This mechanism will be improved later
000001EC: E50F3010    ;         STR R3, return4+4       ; Assembler will evaluate addition      
000001F0: E1A00002    ;         MOV R0, R2
000001F4: EF000003    ;         SVC 3
000001F8: EBFFFFC5    ;         BL  sorted
000001FC: B3A0003C    ;         MOVLT R0, #'<'          ; Three-way IF using conditions
00000200: 03A0003D    ;         MOVEQ R0, #'='
00000204: C3A0003E    ;         MOVGT R0, #'>'
00000208: EF000000    ;         SVC 0
0000020C: E51F0030    ;         LDR R0, return4+4
00000210: EF000003    ;         SVC 3
00000214: E3A0000A    ;         MOV R0, #10
00000218: EF000000    ;         SVC 0
0000021C: E51FF044    ;         LDR PC, return4
00000220:             ; 
00000220: E24F2D07    ; part3   ADR R2, s1
00000224: E24F3D07    ;         ADR R3, s2
00000228: EBFFFFEE    ;         BL  test2
0000022C: E24F2F72    ;         ADR R2, s2
00000230: E24F3F72    ;         ADR R3, s3
00000234: EBFFFFEB    ;         BL  test2
00000238: E24F2E1D    ;         ADR R2, s3
0000023C: E24F3F73    ;         ADR R3, s4
00000240: EBFFFFE8    ;         BL  test2
00000244: E24F2F75    ;         ADR R2, s4
00000248: E24F3E1D    ;         ADR R3, s5
0000024C: EBFFFFE5    ;         BL  test2
00000250: E24F2F76    ;         ADR R2, s5
00000254: E24F3F75    ;         ADR R3, s6
00000258: EBFFFFE2    ;         BL  test2
0000025C: E24F2F77    ;         ADR R2, s6
00000260: E24F3F77    ;         ADR R3, s7
00000264: EBFFFFDF    ;         BL  test2
00000268: E24F2F79    ;         ADR R2, s7
0000026C: E24F3E1E    ;         ADR R3, s8
00000270: EBFFFFDC    ;         BL  test2
00000274: E24F2F7A    ;         ADR R2, s8
00000278: E24F3E1E    ;         ADR R3, s9
0000027C: EBFFFFD9    ;         BL  test2
00000280: E24F2F7D    ;         ADR R2, s8
00000284: E24F3F7E    ;         ADR R3, s8
00000288: EBFFFFD6    ;         BL  test2
0000028C: EF000002    ;         SVC 2
00000290:             ; 

Symbol Table: Labels
: buffer                            00000004  Local -- ARM
: s1                                00000068  Local -- ARM
: s2                                0000006C  Local -- ARM
: s3                                00000070  Local -- ARM
: s4                                00000078  Local -- ARM
: s5                                00000080  Local -- ARM
: s6                                00000088  Local -- ARM
: s7                                0000008C  Local -- ARM
: s8                                00000094  Local -- ARM
: s9                                000000A0  Local -- ARM
: printstring                       000000A8  Local -- ARM
: loop                              000000A8  Local -- ARM
: strcat                            000000C4  Local -- ARM
: find                              000000C4  Local -- ARM
: cat                               000000D8  Local -- ARM
: strcpy                            000000F4  Local -- ARM
: loops                             000000F8  Local -- ARM
: sorted                            00000114  Local -- ARM
: search                            0000011C  Local -- ARM
: checkzero                         00000130  Local -- ARM
: exits                             00000148  Local -- ARM
: return2                           00000150  Local -- ARM
: part1                             00000154  Local -- ARM
: part2                             000001A0  Local -- ARM
: return4                           000001E0  Local -- ARM
: test2                             000001E8  Local -- ARM
: part3                             00000220  Local -- ARM
