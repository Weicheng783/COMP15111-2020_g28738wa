KMD
00000000:             ; ; COMP15111 lab 4 - Template file
00000000:             ; 
00000000:             ; print_char      equ     0               ; Define names to aid readability
00000000:             ; stop            equ     2
00000000:             ; print_str       equ     3
00000000:             ; print_no        equ     4
00000000:             ; 
00000000:             ; cLF             equ     10              ; Line-feed character
00000000:             ; 
00000000:             ; 
00000000: E28FD064    ;                 ADR     SP, _stack      ; set SP pointing to the end of our stack
00000004: EA00006D    ;                 B       main
00000008:             ; 
00000008:             ;                 DEFS    100             ; this chunk of memory is for the stack
0000006C:             ; _stack                                  ; This label is 'just after' the stack space
0000006C:             ; 
0000006C: 00000000    ; temp DEFW 0
00000070: 54 68 69 73 ; wasborn         DEFB    "This person was born on ",0
00000074: 20 70 65 72 ; 
00000078: 73 6F 6E 20 ; 
0000007C: 77 61 73 20 ; 
00000080: 62 6F 72 6E ; 
00000084: 20 6F 6E 20 ; 
00000088: 00          ; 
00000089: 54 68 69 73 ; was             DEFB    "This person was ",0
0000008D: 20 70 65 72 ; 
00000091: 73 6F 6E 20 ; 
00000095: 77 61 73 20 ; 
00000099: 00          ; 
0000009A: 20 6F 6E 20 ; on              DEFB    " on ",0
0000009E: 00          ; 
0000009F: 54 68 69 73 ; is              DEFB    "This person is ",0
000000A3: 20 70 65 72 ; 
000000A7: 73 6F 6E 20 ; 
000000AB: 69 73 20 00 ; 
000000AF: 20 74 6F 64 ; today           DEFB    " today!",0
000000B3: 61 79 21 00 ; 
000000B7: 54 68 69 73 ; willbe          DEFB    "This person will be ",0
000000BB: 20 70 65 72 ; 
000000BF: 73 6F 6E 20 ; 
000000C3: 77 69 6C 6C ; 
000000C7: 20 62 65 20 ; 
000000CB: 00          ; 
000000CC:             ;                 ALIGN
000000CC:             ; 
000000CC: 00000017    ; pDay              DEFW  23              ;  pDay = 23    //or whatever is today's date
000000D0: 0000000B    ; pMonth          DEFW    11              ;  pMonth = 11  //or whatever is this month
000000D4: 000007D5    ; pYear             DEFW  2005    ;  pYear = 2005 //or whatever is this year
000000D8:             ; 
000000D8:             ; 
000000D8:             ; ; def printAgeHistory (bDay, bMonth, bYear)
000000D8:             ; 
000000D8:             ; ; parameters
000000D8:             ; ;  R0 = bDay (on entry, moved to R6 to allow SVC to output via R0)
000000D8:             ; ;  R1 = bMonth
000000D8:             ; ;  R2 = bYear
000000D8:             ; ; local variables (callee-saved registers)
000000D8:             ; ;  R4 = year
000000D8:             ; ;  R5 = age
000000D8:             ; ;  R6 = bDay - originally R0
000000D8:             ; 
000000D8:             ; printsthedate
000000D8: E1A00004    ;         MOV     R0, R4
000000DC: EF000004    ;                 SVC     print_no
000000E0: E3A0002F    ;                 MOV     R0, #'/'
000000E4: EF000000    ;                 SVC     print_char
000000E8: E1A00005    ;                 MOV     R0, R5
000000EC: EF000004    ;                 SVC     print_no
000000F0: E3A0002F    ;                 MOV     R0, #'/'
000000F4: EF000000    ;                 SVC     print_char
000000F8: E1A00006    ;                 MOV     R0, R6
000000FC: EF000004    ;                 SVC     print_no
00000100: E3A0000A    ;                 MOV     R0, #cLF
00000104: EF000000    ;                 SVC     print_char
00000108:             ;         
00000108: E1A0F00E    ;         MOV PC, LR
0000010C:             ; 
0000010C:             ; 
0000010C:             ; printAgeHistory ;PUSH   {R6}                    ; callee saves three registers
0000010C:             ;                 ;PUSH   {R5}
0000010C:             ;                 ;PUSH   {R4}
0000010C:             ;         
0000010C:             ;         ;LDMFD SP!, {R2}
0000010C:             ;         ;LDMFD SP!, {R1}
0000010C:             ;         ;LDMFD SP!, {R6}
0000010C:             ;                 ;LDR    R6, R7  ; Get parameters from stack : pDay +20 R4
0000010C:             ;                 ;LDR    R1, R8 ;pMon +16 R5
0000010C:             ;                 ;LDR    R2, R9 ;2000 +12 R6
0000010C:             ; 
0000010C:             ; ;   year = bYear + 1
0000010C:             ;                 ;ADD    R4, R2, #1; 2000+1
0000010C: E2866001    ;         ADD R6, R6, #1
00000110:             ; ;   age = 1;
00000110:             ;                 ;MOV    R5, #1; age
00000110: E3A01001    ;         MOV R1, #1 ;age
00000114:             ; 
00000114:             ; ; print("This person was born on " + str(bDay) + "/" + str(bMonth) + "/" + str(bYear))
00000114: E24F00AC    ;                 ADRL    R0, wasborn
00000118: EF000003    ;                 SVC     print_str
0000011C: E50FE0B8    ;         STR LR, temp
00000120: EBFFFFEC    ;         BL  printsthedate
00000124:             ; 
00000124:             ;                 
00000124:             ; 
00000124:             ; ; this code does: while year < pYear //{
00000124: E51F0058    ; loop1   LDR     R0, pYear
00000128: E1560000    ;                 CMP     R6, R0
0000012C: 2A000009    ;                 BHS     end1            ; Years are unsigned
00000130:             ; ; for part 4, should be changed to:
00000130:             ; ; while year < pYear or
00000130:             ; ;                               (year == pYear and bMonth < pMonth) or
00000130:             ; ;                               (year == pYear and bMonth == pMonth and bDay < pDay):
00000130:             ; 
00000130:             ; ;  print("This person was " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(yea
                      ; r))
00000130: E24F00AF    ;                 ADRL    R0, was
00000134: EF000003    ;                 SVC     print_str
00000138: E1A00001    ;                 MOV     R0, R1
0000013C: EF000004    ;                 SVC     print_no
00000140: E24F00AE    ;                 ADRL    R0, on
00000144: EF000003    ;                 SVC     print_str
00000148:             ; 
00000148: EBFFFFE2    ;                 BL printsthedate
0000014C:             ; 
0000014C:             ;                 ; year = year + 1
0000014C: E2866001    ;                 ADD     R6, R6, #1
00000150:             ;                 ; age = age + 1
00000150: E2811001    ;                 ADD     R1, R1, #1
00000154:             ;                 ; //}
00000154: EAFFFFF2    ;                 B       loop1
00000158:             ; 
00000158:             ; end1
00000158:             ; ; this code does: if (bMonth == pMonth):
00000158:             ; ; for part 4, should be changed to:
00000158:             ; ; if (bMonth == pMonth and bDay == pDay):
00000158: E51F0090    ;                 LDR     R0, pMonth
0000015C: E1550000    ;                 CMP     R5, R0
00000160: 1A000008    ;                 BNE     else1
00000164:             ; 
00000164:             ; ; print("This person is " + str(age) + " today!")
00000164: E24F00CD    ;                 ADRL    R0, is
00000168: EF000003    ;                 SVC     print_str
0000016C: E1A00001    ;                 MOV     R0, R1
00000170: EF000004    ;                 SVC     print_no
00000174: E24F00CD    ;                 ADRL    R0, today
00000178: EF000003    ;                 SVC     print_str
0000017C: E3A0000A    ;                 MOV     R0, #cLF
00000180: EF000000    ;                 SVC     print_char
00000184:             ; 
00000184:             ; ; else
00000184: EA000007    ;                 B       end2
00000188:             ;         ;MOV    PC, LR
00000188:             ; else1
00000188:             ; ; print("This person will be " + str(age) + " on " + str(bDay) + "/" + str(bMonth) + "/" + str(
                      ; year))
00000188: E24F00D9    ;                 ADRL    R0, willbe
0000018C: EF000003    ;                 SVC     print_str
00000190: E1A00001    ;                 MOV     R0, R1
00000194: EF000004    ;                 SVC     print_no
00000198: E24F0006    ;                 ADRL    R0, on
0000019C: E2400C01    ; 
000001A0: EF000003    ;                 SVC     print_str
000001A4:             ;         ;STR LR, temp
000001A4: EBFFFFCB    ;                 BL printsthedate
000001A8:             ; 
000001A8:             ; ; }// end of printAgeHistory
000001A8:             ; end2            ;POP    {R4}            ; callee saved registers
000001A8:             ;                 ;POP    {R5}
000001A8:             ;                 ;POP    {R6}
000001A8:             ;         ;LDMFD SP!, {R4}
000001A8:             ;         ;LDMFD SP!, {R5}
000001A8:             ;         ;LDMFD SP!, {R6}
000001A8: E51FE144    ;         LDR LR, temp
000001AC: E1A0F00E    ;                 MOV     PC, LR
000001B0:             ; 
000001B0: 41 6E 6F 74 ; another         DEFB    "Another person",10,0
000001B4: 68 65 72 20 ; 
000001B8: 70 65 72 73 ; 
000001BC: 6F 6E 0A 00 ; 
000001C0:             ;                 ALIGN
000001C0:             ; 
000001C0:             ; ; def main():
000001C0:             ; main
000001C0: E59F40B0    ;         LDR     R4, =&12345678          ; Test value - not part of Java compilation
000001C4: E1A05004    ;         MOV     R5, R4                  ; See later if these registers corrupted
000001C8: E1A06004    ;         MOV     R6, R4
000001CC: E92D0070    ;     STMFD SP!, {R4-R6}
000001D0:             ; 
000001D0:             ; ; printAgeHistory(pDay, pMonth, 2000)
000001D0: E51F410C    ;                 LDR     R4, pDay
000001D4:             ;                 ;PUSH   {R0}                    ; Stack first parameter
000001D4:             ;         ;STMFD SP!, {R0}
000001D4: E51F510C    ;                 LDR     R5, pMonth
000001D8:             ;                 ;PUSH   {R0}                    ; Stack second parameter
000001D8:             ;         ;STMFD SP!, {R0}
000001D8: E3A06E7D    ;                 MOV     R6, #2000
000001DC:             ;                 ;PUSH   {R0}                    ; Stack third parameter
000001DC:             ;         ;STMFD SP!, {R0}
000001DC: EBFFFFCA    ;                 BL      printAgeHistory
000001E0:             ;                 ;POP    {R0}                    ; Deallocate three 32-bit variables
000001E0:             ;                 ;POP    {R0}
000001E0:             ;                 ;POP    {R0}
000001E0:             ; 
000001E0:             ; 
000001E0:             ; 
000001E0:             ; ; print("Another person");
000001E0: E24F0038    ;                 ADRL    R0, another
000001E4: EF000003    ;                 SVC     print_str
000001E8:             ; 
000001E8:             ; ; printAgeHistory(13, 11, 2000)
000001E8: E3A0400D    ;                 MOV     R4, #13
000001EC:             ;                 ;PUSH   {R0}                    ; Stack first parameter
000001EC:             ;         ;STMFD SP!, {R0}
000001EC: E3A0500B    ;                 MOV     R5, #11
000001F0:             ;                 ;STR    R0, [SP, #-4]!          ; An explicit coding of PUSH
000001F0: E3A06E7D    ;                 MOV     R6, #2000
000001F4:             ;                 ;STMFD  SP!, {R0}               ; The STore Multiple mnemonic for PUSH {R0}
000001F4: EBFFFFC4    ;                 BL      printAgeHistory
000001F8:             ;                 ;POP    {R0}                    ; Deallocate three 32-bit variables
000001F8:             ;                 ;POP    {R0}
000001F8:             ;                 ;POP    {R0}
000001F8:             ;         ;LDMFD SP!, {R0}
000001F8:             ;         ;LDMFD SP!, {R0}
000001F8:             ;         ;LDMFD SP!, {R0}
000001F8: E8BD0070    ;         LDMFD SP!, {R4-R6}
000001FC:             ; 
000001FC:             ;         ; Now check to see if register values intact (Not part of Java)
000001FC: E59F0074    ;         LDR     R0, =&12345678          ; Test value
00000200: E1540000    ;         CMP     R4, R0                  ; Did you preserve these registers?
00000204: 01550000    ;         CMPEQ   R5, R0                  ;
00000208: 01560000    ;         CMPEQ   R6, R0                  ;
0000020C:             ; 
0000020C: 128F0014    ;         ADRLNE  R0, whoops1             ; Oh dear!
00000210: 1F000003    ;         SVCNE   print_str               ;
00000214:             ; 
00000214: E24F0E1B    ;         ADRL    R0, _stack              ; Have you balanced pushes & pops?
00000218: E15D0000    ;         CMP     SP, R0                  ;
0000021C:             ; 
0000021C: 128F002A    ;         ADRLNE  R0, whoops2             ; Oh no!!
00000220: 1F000003    ;         SVCNE   print_str               ; End of test code
00000224:             ; 
00000224:             ; ; }// end of main
00000224: EF000002    ;                 SVC     stop
00000228:             ; 
00000228:             ; 
00000228: 0A 2A 2A 20 ; whoops1         DEFB    "\n** BUT YOU CORRUPTED REGISTERS!  **\n", 0
0000022C: 42 55 54 20 ; 
00000230: 59 4F 55 20 ; 
00000234: 43 4F 52 52 ; 
00000238: 55 50 54 45 ; 
0000023C: 44 20 52 45 ; 
00000240: 47 49 53 54 ; 
00000244: 45 52 53 21 ; 
00000248: 20 20 2A 2A ; 
0000024C: 0A 00       ; 
0000024E: 0A 2A 2A 20 ; whoops2         DEFB    "\n** BUT YOUR STACK DIDN'T BALANCE!  **\n", 0
00000252: 42 55 54 20 ; 
00000256: 59 4F 55 52 ; 
0000025A: 20 53 54 41 ; 
0000025E: 43 4B 20 44 ; 
00000262: 49 44 4E 27 ; 
00000266: 54 20 42 41 ; 
0000026A: 4C 41 4E 43 ; 
0000026E: 45 21 20 20 ; 
00000272: 2A 2A 0A 00 ; 
00000276:             ; 
00000276: 00 00       ; (padding)
00000278: 12345678    ; Remaining literals

Symbol Table: Labels
: print_char                        00000000  Value
: stop                              00000002  Value
: print_str                         00000003  Value
: print_no                          00000004  Value
: cLF                               0000000A  Value
: _stack                            0000006C  Local -- ARM
: temp                              0000006C  Local -- ARM
: wasborn                           00000070  Local -- ARM
: was                               00000089  Local -- ARM
: on                                0000009A  Local -- ARM
: is                                0000009F  Local -- ARM
: today                             000000AF  Local -- ARM
: willbe                            000000B7  Local -- ARM
: pDay                              000000CC  Local -- ARM
: pMonth                            000000D0  Local -- ARM
: pYear                             000000D4  Local -- ARM
: printsthedate                     000000D8  Local -- ARM
: printAgeHistory                   0000010C  Local -- ARM
: loop1                             00000124  Local -- ARM
: end1                              00000158  Local -- ARM
: else1                             00000188  Local -- ARM
: end2                              000001A8  Local -- ARM
: another                           000001B0  Local -- ARM
: main                              000001C0  Local -- ARM
: whoops1                           00000228  Local -- ARM
: whoops2                           0000024E  Local -- ARM
